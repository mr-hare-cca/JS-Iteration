name: "Classroom Autograder – Unit 8.3: Iteration (Movie Ticket Prices)"

on:
  push:
  pull_request:

jobs:
  autograde:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test dependencies
        run: |
          npm install --save-dev jest@29 jsdom@21 jest-environment-jsdom@29

      - name: Create Jest setup
        run: |
          cat > jest.setup.cjs <<'EOF'
          const { TextEncoder, TextDecoder } = require('util');
          if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
          if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;
          EOF

      - name: Create Jest config
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            setupFiles: ['<rootDir>/jest.setup.cjs'],
            testMatch: [
              '**/__tests__/**/*.test.cjs',
              '**/?(*.)+(spec|test).[jt]s?(x)'
            ]
          };
          EOF

      - name: Create Jest tests (strict numeric checks + edge cases)
        run: |
          mkdir -p __tests__
          cat > __tests__/script.test.cjs <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { JSDOM, VirtualConsole } = require('jsdom');

          function findIndexPath() {
            const candidates = ['index.html', 'public/index.html', 'src/index.html', 'docs/index.html'];
            for (const c of candidates) if (fs.existsSync(c)) return c;
            return null;
          }

          async function wait(ms = 25) {
            return new Promise(res => setTimeout(res, ms));
          }

          async function loadDOM() {
            const indexPath = findIndexPath();
            if (!indexPath) throw new Error("index.html not found");

            const baseDir = path.dirname(path.resolve(indexPath));
            const baseUrl = 'file://' + baseDir.replace(/\\+/g, '/') + '/';
            const vconsole = new VirtualConsole();
            vconsole.on('error', () => {});

            const dom = await JSDOM.fromFile(indexPath, {
              url: baseUrl,
              runScripts: 'dangerously',
              resources: 'usable',
              pretendToBeVisual: true,
              virtualConsole: vconsole
            });

            await new Promise(res => dom.window.addEventListener('load', res, { once: true }));
            await wait();
            return dom;
          }

          function setAgeAndTrigger(window, document, ageVal) {
            const input = document.getElementById('age');
            if (!input) return false;
            input.value = String(ageVal);
            input.dispatchEvent(new window.Event('input', { bubbles: true }));
            input.dispatchEvent(new window.Event('change', { bubbles: true }));
            try { window.eval('if (typeof calculate==="function"){ calculate(); }'); } catch {}
            if (typeof window.calculate === 'function') window.calculate();
            return true;
          }

          function readPriceNumber(document) {
            const el = document.getElementById('priceOutput');
            if (!el) return NaN;
            const raw = (el.textContent || el.innerText || '').trim();
            // Extract the FIRST number token (e.g., "$20.00" -> 20; "Your price: 20" -> 20)
            const m = raw.match(/-?\d+(?:\.\d+)?/);
            if (!m) return NaN;
            return Number(m[0]);
          }

          describe("Movie Ticket Price Calculator", () => {
            let dom, window, document;

            beforeEach(async () => {
              dom = await loadDOM();
              window = dom.window;
              document = window.document;
            });

            test("has required elements", () => {
              expect(document.getElementById('age')).not.toBeNull();
              expect(document.getElementById('priceOutput')).not.toBeNull();
            });

            // Core bracket tests (one per bracket)
            const coreCases = [
              { age: 5,   expected: 7,  label: "child" },
              { age: 15,  expected: 12, label: "student" },
              { age: 30,  expected: 20, label: "adult" },
              { age: 70,  expected: 12, label: "senior" },
            ];

            for (const c of coreCases) {
              test(`displays correct price for a ${c.label}`, async () => {
                expect(setAgeAndTrigger(window, document, c.age)).toBe(true);
                await wait();
                const price = readPriceNumber(document);
                expect(Number.isNaN(price)).toBe(false);
                expect(price).toBe(c.expected);
              });
            }

            // Edge boundaries to catch off-by-one errors
            const edgeCases = [
              { age: 12, expected: 7,  note: "max child" },
              { age: 13, expected: 12, note: "min student" },
              { age: 17, expected: 12, note: "max student" },
              { age: 18, expected: 20, note: "min adult" },
              { age: 64, expected: 20, note: "max adult" },
              { age: 65, expected: 12, note: "min senior" },
            ];

            for (const e of edgeCases) {
              test(`edge case age=${e.age} -> $${e.expected} (${e.note})`, async () => {
                expect(setAgeAndTrigger(window, document, e.age)).toBe(true);
                await wait();
                const price = readPriceNumber(document);
                expect(Number.isNaN(price)).toBe(false);
                expect(price).toBe(e.expected);
              });
            }
          });
          EOF

      - name: Run tests and create JSON results
        id: jest
        continue-on-error: true
        run: npx jest --runInBand --verbose --json --outputFile=jest-results.json

      - name: Upload raw results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-results
          path: jest-results.json

      - name: Summarize results for students (no solutions shown)
        if: always()
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const r = JSON.parse(fs.readFileSync('jest-results.json','utf8'));

          const total  = r.numTotalTests ?? 0;
          const passed = r.numPassedTests ?? 0;
          const failed = r.numFailedTests ?? 0;
          const runtimeErrSuites = r.numRuntimeErrorTestSuites ?? 0;

          // Flatten all assertion results
          const all = (r.testResults || []).flatMap(tr => tr.assertionResults || []);
          const textOf = ar => (ar.title || ar.fullName || '').toLowerCase();

          // Robust keyword matcher
          function passedByKeyword(keyword) {
            keyword = keyword.toLowerCase();
            return all.some(ar => textOf(ar).includes(keyword) && ar.status === 'passed');
          }

          const checks = [
            {label: 'has required elements',               keyword: 'has required elements', hint: 'Your page must include inputs #age and #priceOutput.'},
            {label: 'displays correct price for a child',  keyword: 'child',                 hint: 'Make sure age 0–12 returns $7.'},
            {label: 'displays correct price for a student',keyword: 'student',               hint: 'Make sure age 13–17 returns $12.'},
            {label: 'displays correct price for an adult', keyword: 'adult',                 hint: 'Make sure age 18–64 returns $20.'},
            {label: 'displays correct price for a senior', keyword: 'senior',                hint: 'Make sure age 65+ returns $12.'}
          ];

          const checkIcon = ok => (ok ? '✅' : '❌');

          const out = [];
          out.push('# Unit 8.3 Autograder Summary');
          out.push(`**Passed:** ${passed}/${total}  ·  **Failed:** ${failed}`);

          if (total === 0 || runtimeErrSuites > 0) {
            out.push('');
            out.push('> ⚠️ No tests ran. This usually means required files were not found (e.g., index.html).');
          }

          out.push('');
          out.push('## What you got right / need to fix');

          for (const {label, keyword, hint} of checks) {
            const ok = passedByKeyword(keyword);
            out.push(`${checkIcon(ok)} ${label}`);
            if (!ok) out.push(`   - Hint: ${hint}`);
          }

          out.push('');
          out.push('### Reminders');
          out.push('- Use an input with id **age** and a button that calls `calculate()`.');
          out.push('- Display the result in an element with id **priceOutput**.');
          out.push('- Brackets: 0–12 → $7, 13–17 → $12, 18–64 → $20, 65+ → $12.');

          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, out.join('\n'));
          NODE

      - name: Set job status from test results
        if: always()
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const r = JSON.parse(fs.readFileSync('jest-results.json','utf8'));
          const total  = r.numTotalTests ?? 0;
          const failed = r.numFailedTests ?? 0;
          const runtimeErrSuites = r.numRuntimeErrorTestSuites ?? 0;

          if (failed > 0 || runtimeErrSuites > 0 || total === 0) {
            console.error('Failing job: failedTests=' + failed + ', runtimeErrorSuites=' + runtimeErrSuites + ', totalTests=' + total);
            process.exit(1);
          } else {
            console.log('All tests passed: failedTests=' + failed + ', runtimeErrorSuites=' + runtimeErrSuites + ', totalTests=' + total);
            process.exit(0);
          }
          NODE
